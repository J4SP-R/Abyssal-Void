#!/bin/bash
# Welcome prompt for JSX-Abyssal Void post install auto setup
echo "Welcome to the JSX-Abyssal Void Post Install Auto Setup!"
echo "This is an automated setup. if you are not 100% sure you want to do this, abort now."


# Function to check internet connection by pinging voidlinux.org
check_internet() {
    echo "Checking internet connection..."
    if ping -c 1 voidlinux.org &>/dev/null; then
        echo "Internet connection is active."
        return 0
    else
        echo "Networking not properly configured. Aborting setup."
        exit 1
    fi
}

# Call the function to check internet connection
check_internet


read -p "Do you really want to run the installer? (Yes/No): " answer
case $answer in
    [Yy]* ) echo "Starting the installation...";;
    [Nn]* ) echo "Exiting the program cleanly." >&2; exit 1;;
    * ) echo "Invalid input. Please enter Yes or No.";;
esac


# Function to check if the script is run as sudo
check_sudo() {
    if [ "$EUID" -ne 0 ]; then
        echo "This script must be run as root. Please re-run the program as sudo."
        exit 1
    fi
}

# Call the function to check for sudo privileges
check_sudo


# adding required REPOS
sudo xbps-install -Sy void-repo-nonfree void-repo-multilib void-repo-multilib-nonfree

# Syncing repos and updating
sudo xbps-install -Syu

# Install GPU drivers
install_gpu_driver() {
    gpu_driver=""
    case "$(lspci | grep -E 'VGA|3D')" in
        *Intel*) gpu_driver="mesa-dri intel-video-accel vulkan-loader mesa-vulkan-intel" ;;
        *AMD*)   gpu_driver="mesa-dri mesa-vaapi mesa-vdpau vulkan-loader mesa-vulkan-radeon" ;;
        *NVIDIA*)gpu_driver="mesa-dri nvidia nvidia-libs-32bit" ;;
    esac
    for pkg in $gpu_driver; do
        [ -n "$pkg" ] && sudo xbps-install -Sy "$pkg"
    done
}

install_gpu_driver


# Set MODESETTING and DRM if it is an NVIDIA GPU


# Function to check if an NVIDIA GPU is present
check_nvidia_gpu() {
    lspci -k | grep -EA3 'VGA|3D|Display' | grep -i nvidia &> /dev/null
    return $?
}

# Function to edit /etc/default/grub
edit_grub_config() {
    GRUB_FILE="/etc/default/grub"
    KERNEL_PARAMS="nvidia_drm.modeset=1 nvidia_drm.fbdev=1 nvidia.NVreg_PreserveVideoMemoryAllocations=1"

    # Backup the original GRUB file
    cp $GRUB_FILE ${GRUB_FILE}.bak

    # Check if 'GRUB_CMDLINE_LINUX_DEFAULT' already contains the necessary kernel parameters
    if ! grep -q "$KERNEL_PARAMS" $GRUB_FILE; then
        # Append the kernel parameters if not already present
        sed -i "s/^GRUB_CMDLINE_LINUX_DEFAULT=\"\(.*\)\"/GRUB_CMDLINE_LINUX_DEFAULT=\"\1 $KERNEL_PARAMS\"/" $GRUB_FILE
    fi
}

# Function to update GRUB
update_grub() {
    sudo update-grub
}


# Function to configure dracut for NVIDIA DRM
configure_dracut() {
    DRACUT_CONF_DIR="/etc/dracut.conf.d"
    NVIDIA_CONF_FILE="$DRACUT_CONF_DIR/nvidia.conf"
    DRIVERS='add_drivers+=" nvidia nvidia-drm nvidia-modeset nvidia-uvm "'

    # Create the dracut configuration directory if it doesn't exist
    if [ ! -d "$DRACUT_CONF_DIR" ]; then
        sudo mkdir -p "$DRACUT_CONF_DIR"
    fi

    # Create the nvidia.conf file with the necessary drivers
    echo "$DRIVERS" | sudo tee "$NVIDIA_CONF_FILE" > /dev/null

    # Regenerate the initramfs to apply the changes
    sudo dracut -f
}



# Main script execution
if check_nvidia_gpu; then
    echo "NVIDIA GPU detected. Editing GRUB configuration and configuring Dracut for DRM..."
    edit_grub_config
    update_grub
    echo "GRUB configuration updated successfully."
    configure_dracut
    echo "dracut configuration updated successfully."
fi


# Install CPU microcode updates
intel_cpu_microcode() {
    if lspci | grep -q 'Intel'; then
        sudo xbps-install -y intel-ucode
        sudo xbps-reconfigure -f linux-$(uname -r)
    fi
}

# Function to install packages listed in a file
install_core_packages() {
    pkglist=$(paste -sd' ' < packages.txt)
    sudo xbps-install -Sy "$pkglist" || echo "Failed to install some packages"
}

# Call the function to install the packages
install_core_packages


# Enable and set up NIX package manager
nix_setup() {
    sudo ln -s /etc/sv/nix-daemon /var/service
    source /etc/profile
    nix-channel --add https://nixos.org/channels/nixos-24.11 nixpkgs
    nix-channel --update
}

# Call the nix setup function
nix_setup

# Install required NIX packages
nix_install_deps() {
    export NIXPKGS_ALLOW_UNFREE=1
    nix-env -iA nixpkgs.grimblast nixpkgs.matugen nixpkgs.uwsm nixpkgs.ueberzugpp nixpkgs.hyprland nixpkgs.hyprlock nixpkgs.hypridle nixpkgs.hyprpicker
}

# Call the nix install function
nix_install_deps

# Installing the other stuff not in the repo
install_fabric() {
    mkdir ~/.config/fabric
    cd $HOME/.config/fabric
    python3 -m venv --system-site-packages venv
    source venv/bin/activate
    pip3 install git+https://github.com/Fabric-Development/fabric.git
    deactivate
    cd $HOME
}

# Call fabric installer
install_fabric

# Installing fabric-CLI
install_fabric_cli() {
    mkdir gits
    cd gits
    git clone https://github.com/Fabric-Development/fabric-cli.git
    cd fabric-cli
    meson setup --buildtype=release --prefix=/usr build && sudo meson install -C build
    cd $HOME
}

# Call fabric-cli installer
install_fabric_cli

# Install Gray for fabric
install_gray() {
    cd gits
    git clone https://github.com/Fabric-Development/gray.git
    cd gray
    meson --prefix=/usr build && sudo ninja -C build install
}

# Call Gray install
install_gray


# Fetching Ax-Shell
fetch_ax_shell() {
    git clone https://github.com/Axenide/Ax-Shell.git ~/.config/Ax-Shell
}

# Call Ax-Shell fetch
fetch_ax_shell

# Fetch my user configs
fetch_my_configs() {
    git clone https://github.com/J4SP-R/configs.git
    cd $HOME/abyssal-configs
    ./install-configs
    cd $HOME
}

# Call user config fetch
fetch_my_configs

# Enable services
enable_services() {
    # Remove wpa and dhcpcd
    sudo rm /var/service/wpa_supplicant
    sudo rm /var/service/dhcpcd

    # dbus
    sudo ln -s /etc/sv/dbus /var/service

    # Enable NetworkManager
    sudo ln -s /etc/sv/NetworkManager /var/service

    # Setting up PIPEWIRE and WIREPLUMBER
    sudo mkdir -p /etc/pipewire/pipewire.conf.d
    sudo ln -s /usr/share/examples/wireplumber/10-wireplumber.conf /etc/pipewire/pipewire.conf.d/
    sudo ln -s /usr/share/examples/pipewire/20-pipewire-pulse.conf /etc/pipewire/pipewire.conf.d/

    # Setting up ALSA compatibility
    sudo mkdir -p /etc/alsa/conf.d
    sudo ln -s /usr/share/alsa/alsa.conf.d/50-pipewire.conf /etc/alsa/conf.d
    ln -s /usr/share/alsa/alsa.conf.d/99-pipewire-default.conf /etc/alsa/conf.d
}

# Call service enabler
enable_services


# Function to append text to .zshrc
append_to_zshrc() {
    echo "$1" >> ~/.zshrc
}

# Append the y function to .zshrc
append_to_zshrc 'function y() {
        local tmp="$(mktemp -t \"yazi-cwd.XXXXXX\")" cwd
        yazi "$@" --cwd-file="$tmp"
        if cwd="$(command cat -- "$tmp")"; then
                builtin cd -- "$cwd"
        fi
        rm -f -- "$tmp"
}'

# Append the export PATH statement to .zshrc
append_to_zshrc 'export PATH="$HOME/scripts/bin:$PATH"'



# Function to ask the user if they want to reboot now
ask_reboot() {
    read -p "Do you want to reboot the system now? (y/n): " answer
    if [[ "$answer" =~ ^[Yy]$ ]]; then
        sudo reboot
    else
        echo "Reboot skipped."
        exit 0
    fi
}




# Call the function to ask the user if they want to reboot
ask_reboot
